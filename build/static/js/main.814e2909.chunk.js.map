{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","virusVisualizationClick","window","location","href","virusPlanetMapperClick","className","Box","component","m","onClick","this","CardMedia","alt","image","title","CardContent","Typography","gutterBottom","variant","color","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAKaA,G,MAAb,4MAEEC,wBAA0B,WACxBC,OAAOC,SAASC,KAAO,iDAH3B,EAKEC,uBAAyB,WACvBH,OAAOC,SAASC,KAAO,2CAN3B,uDAUI,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAAlB,eAGA,kBAACC,EAAA,EAAD,CAAKC,UAAU,OAAOC,EAAG,GACvB,yBAAKH,UAAU,cAAcI,QAASC,KAAKV,yBACzC,kBAACW,EAAA,EAAD,CACIJ,UAAU,MACVK,IAAI,wBACJC,MAAM,oFACNC,MAAM,0BAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKX,UAAU,MAAhD,oBAGA,kBAACS,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBZ,UAAU,KAA5D,qCAMR,kBAACD,EAAA,EAAD,CAAKC,UAAU,OAAOC,EAAG,GACvB,yBAAKH,UAAU,cAAcI,QAASC,KAAKN,wBACzC,kBAACO,EAAA,EAAD,CACIJ,UAAU,MACVK,IAAI,wBACJC,MAAM,oFACNC,MAAM,0BAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKX,UAAU,MAAhD,iBAGA,kBAACS,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBZ,UAAU,KAA5D,iCA7ChB,GAAyBa,IAAMC,YCOXC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.814e2909.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, CardMedia, Link, CardContent, Typography } from '@material-ui/core';\n\nimport './App.css';\n\nexport class App extends React.Component {\n  \n  virusVisualizationClick = () => {\n    window.location.href = 'https://jgf5013.github.io/virus-visualization';\n  };\n  virusPlanetMapperClick = () => {\n    window.location.href = 'https://jgf5013.github.io/planet-mapper';\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          John Fisher\n        </header>\n        <Box component=\"span\" m={1}>\n          <div className=\"cardWrapper\" onClick={this.virusVisualizationClick}>\n            <CardMedia\n                component=\"img\"\n                alt=\"Contemplative Reptile\"\n                image=\"https://raw.githubusercontent.com/jgf5013/planet-mapper/master/public/favicon.png\"\n                title=\"Contemplative Reptile\"\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Virus Simulation\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Why do I need to stay inside??\n                </Typography>\n              </CardContent>\n            </div>\n        </Box>\n        <Box component=\"span\" m={1}>\n          <div className=\"cardWrapper\" onClick={this.virusPlanetMapperClick}>\n            <CardMedia\n                component=\"img\"\n                alt=\"Contemplative Reptile\"\n                image=\"https://raw.githubusercontent.com/jgf5013/planet-mapper/master/public/favicon.png\"\n                title=\"Contemplative Reptile\"\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Planet Mapper\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Worlds upon worlds...\n                </Typography>\n              </CardContent>\n            </div>\n        </Box>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}